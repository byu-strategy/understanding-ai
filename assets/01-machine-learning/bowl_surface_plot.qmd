```{python}
#| fig-cap: "MSE Loss Surface with Contours"
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
#| interactive: true

import numpy as np
import plotly.graph_objects as go

# Toy training data (from y = 2x + 1)
x_vals = np.array([0, 1, 2, 3])
y_vals = np.array([1, 3, 5, 7])

# Weight grid
w0_range = np.linspace(-10, 10, 100)
w1_range = np.linspace(-10, 10, 100)
W0, W1 = np.meshgrid(w0_range, w1_range)

# Compute MSE Loss surface
Loss = np.zeros_like(W0)
for i in range(len(x_vals)):
    y_pred = W0 + W1 * x_vals[i]
    Loss += (y_pred - y_vals[i])**2
Loss /= len(x_vals)

# Define Points A and B (arbitrary examples)
w0_A, w1_A = 1, 1
loss_A = np.mean((w0_A + w1_A * x_vals - y_vals) ** 2)

w0_B, w1_B = 6, 6
loss_B = np.mean((w0_B + w1_B * x_vals - y_vals) ** 2)

fig = go.Figure()

# Surface with contour projection
fig.add_trace(go.Surface(
    z=Loss,
    x=W0,
    y=W1,
    colorscale='Viridis',
    showscale=False,
contours=dict(
    z=dict(
        show=True,
        usecolormap=True,
        project_z=True,
        start=0,
        end=np.max(Loss),
        size=40    # smaller size = more contours
    )
),
    opacity=0.5,
    name='MSE Loss Surface'
))

# Point A
fig.add_trace(go.Scatter3d(
    x=[w0_A], y=[w1_A], z=[loss_A],
    mode='markers+text',
    marker=dict(color='black', size=4, symbol='diamond'),
    text=["A"],
    textposition="top center",
    name=f"Point A: w₀={w0_A}, w₁={w1_A}, Loss={loss_A:.2f}",
    showlegend=True
))

# Point B
fig.add_trace(go.Scatter3d(
    x=[w0_B], y=[w1_B], z=[loss_B],
    mode='markers+text',
    marker=dict(color='red', size=4, symbol='square'),
    text=["B"],
    textposition="top center",
    name=f"Point B: w₀={w0_B}, w₁={w1_B}, Loss={loss_B:.2f}",
    showlegend=True
))

# Layout
fig.update_layout(
    scene=dict(
        xaxis_title='w₀ (Intercept)',
        yaxis_title='w₁ (Slope)',
        zaxis_title='Loss',
        xaxis=dict(showspikes=False),
        yaxis=dict(showspikes=False),
        zaxis=dict(showspikes=False)
    ),
    width=700,
    height=600,
    legend=dict(
        x=0.5,
        y=1,
        xanchor="center",
        yanchor="bottom",
        bgcolor='rgba(255,255,255,0.6)',
        bordercolor='black',
        borderwidth=1
    ),
    margin=dict(l=0, r=0, t=40, b=0)
)

fig.show()



```