[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "",
    "text": "1 Syllabus\nFALL 2025\nInstructor: Scott Murff\nTAs: TBD Class Time: M/W, 3:30–4:45 PM\nClass Location: TNRB W308\nLMS: LearningSuite",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#content-overview",
    "href": "index.html#content-overview",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.1 Content Overview",
    "text": "1.1 Content Overview\nWelcome to Understanding AI: From Foundations to Strategy. In this course, students will learn where large language models (LLMs) like ChatGPT fit into the broader landscape of Artificial Intelligence (AI). Students will then build an LLM from the ground up using Python. The course concludes with a strategic exploration of how AI is transforming companies and society and how to harness it for good.\nThe course will begin with an essential math review but to excel in the course students should have some prior experience with differential calculus (i.e. derivatives), matrix multiplication (i.e. multiplying two or more matrices together), conditional probability, and basic Python programming.\n\n\n\n\n\n\n\n\nImage source: Build a Large Language Model (From Scratch) by Sebastian Raschka",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#who-should-take-this-course",
    "href": "index.html#who-should-take-this-course",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.2 Who Should Take This Course",
    "text": "1.2 Who Should Take This Course\nThis course is intended for advanced undergraduates and/or masters students who want a deep, technical introduction to LLMs alongside strategic insight into their real-world deployment.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.3 Learning Outcomes",
    "text": "1.3 Learning Outcomes\n\n\n\n\n\n\n\nLearning Outcome\nTarget BYU Aim(s)\n\n\n\n\n1. Students will be able to implement basic AI and machine learning algorithms from first principles, including linear regression and neural networks, and apply these to Generative AI and LLM use cases.\nIntellectually Enlarging\n\n\n2. Students will analyze and explain the ethical, spiritual, and social implications of AI technologies, including their alignment (or misalignment) with eternal truths and principles of discipleship.\nSpiritually Strengthening, Character Building\n\n\n3. Students will demonstrate Christlike attributes such as diligence, humility, and purposeful curiosity in collaborative learning and problem-solving related to AI topics.\nCharacter Building\n\n\n4. Students will articulate how their understanding of AI can be used to bless the lives of others and reflect their discipleship to Jesus Christ in the workplace and community.\nLifelong Learning and Service, Spiritually Strengthening",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#instructor-bio",
    "href": "index.html#instructor-bio",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.4 Instructor Bio",
    "text": "1.4 Instructor Bio\nScott Murff is an Associate Teaching Professor of Strategy at the BYU Marriott School of Business, where he also serves as program director and teaches courses on business strategy, decision-making, and artificial intelligence. He brings over 15 years of experience at the intersection of business and technology, having worked as a consultant, product manager, and data scientist.\nPrior to joining BYU, Scott spent nearly seven years at McKinsey & Company in roles ranging from analytics specialist consultant to principal product manager, where he led product development and performance management initiatives for Fortune 500 clients. His earlier career includes building forecasting models as a VP at Zions Bancorporation and conducting regulatory research at the U.S. Office of the Comptroller of the Currency.\nScott holds a Master’s degree in Management Science & Engineering from Stanford University and a B.A. in Economics from BYU. He is passionate about helping students apply AI, analytics, and strategy to meaningful real-world problems with both rigor and purpose.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.5 Schedule",
    "text": "1.5 Schedule\nComing Soon.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.6 Grading",
    "text": "1.6 Grading\nThe course is not graded on a curve. It’s possible for every student to earn an A. However, achieving an A is challenging and demonstrates true excellence. The grading scale is show below:\n\n\n\nLetter Grade\nPercentage Range\nGPA\n\n\n\n\nA\n93–100%\n4.0\n\n\nA-\n90–92%\n3.7\n\n\nB+\n87–89%\n3.4\n\n\nB\n83–86%\n3.0\n\n\nB-\n80–82%\n2.7\n\n\nC+\n77–79%\n2.4\n\n\nC\n73–76%\n2.0\n\n\nC-\n70–72%\n1.7\n\n\nD+\n67–69%\n1.4\n\n\nD\n63–66%\n1.0\n\n\nD-\n60–62%\n0.7\n\n\nE (Fail)\nBelow 60%\n0.0\n\n\n\n\n1.6.1 Late work policy\nLate work will be accepted up to 9 days late for partial credit with a 10% penalty per day according to the following schedule\n\n\n\nDays Late\nLate Penalty\n\n\n\n\n1\n-10%\n\n\n2\n-20%\n\n\n3\n-30%\n\n\n4\n-40%\n\n\n5\n-50%\n\n\n6\n-60%\n\n\n7\n-70%\n\n\n8\n-80%\n\n\n9\n-90%\n\n\n10\nNo Credit",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#classroom-culture",
    "href": "index.html#classroom-culture",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.7 Classroom Culture",
    "text": "1.7 Classroom Culture\n\n1.7.1 Mission and Aims\nThe mission of Brigham Young University — founded, supported, and guided by The Church of Jesus Christ of Latter-day Saints — is to assist individuals in their quest for perfection and eternal life. That assistance should provide a period of intensive learning in a stimulating setting where a commitment to excellence is expected and the full realization of human potential is pursued.\nBYU seeks to develop students of faith, intellect, and character who have the skills and the desire to continue learning and to serve others throughout their lives.\nA BYU education should be (1) spiritually strengthening, (2) intellectually enlarging, and (3) character building, leading to (4) lifelong learning and service.\nBuilding on the foundational Mission and Aims, the Marriott School of Business aspires to transform the world through Christlike leadership by developing leaders of faith, intellect, and character guided by the following 4 values:\n\nFaith in Christ - We value deep and abiding faith in Jesus Christ. Our faith gives us the capacity to envision a better future, the confidence to make that future happen, and the courage to act in the face of challenges.\nIntegrity in Action - We value integrity and hold ourselves to the highest moral and ethical standards. Acting with integrity builds trust, strengthens character, and focuses our ambitions on things of eternal consequence.\nRespect for All - We value respect for all individuals as children of God and recognize the inherent worth, divine potential, and agency of each person. A climate of respect and belonging enhances our learning, facilitates collaboration, and encourages personal growth.\nExcellence - We value excellence in learning, teaching, research, management, and leadership. An expectation of excellence magnifies our influence and motivates us to continually improve.\n\nWe evaluate our decisions and actions by the impact they will have on the academic experience, professional preparation, character development, emotional well-being, and spiritual growth of our students.\n\n1.7.1.1 Prayer in class\nWe will begin each class with prayer. Each class member is invited to be voice for the prayer at least once throughout the semester. The TAs will reach out prior to class to invite you to pray on a particular day. If you’d rather not be voice for a prayer please let me know on the first day of class so I can instruct the TAs accordingly.\n\n\n1.7.1.2 Laptop Policy\nYou may use laptops in class for note taking or other class related purposes. Laptops should not be used for activities that would be a distraction to nearby students when your screen is in their line of sight (e.g. sports, instagram, etc.)\n\n\n1.7.1.3 Cold Calling\nI teach in a fairly conversational style, which includes cold calling students to ask for your input or to pose questions. If you’d rather I not cold call on you please let me know on the first day of class so that I can avoid doing so. I have deep respect for individual learning styles and will make accommodations when needed.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#required-materials",
    "href": "index.html#required-materials",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.8 Required Materials",
    "text": "1.8 Required Materials\n\nBuild a Large Language Model From Scratch or here\n\nLMS: LearningSuite Class communication: Slack Required materials: The Lean Product Playbook: How to Innovate with Minimum Viable Products and Rapid Customer Feedback by Dan Olsen (physical copy recommended, $25 or less). Text and audio also available for free for BYU students digitally at O’Reilly books. Laptop or desktop (Mac or Windows) Install Mendix Studio Pro version 10.18.0 on Mac or Windows (free) Verify your student status with Figma and install desktop app for Mac or Windows (free)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.9 Getting Help",
    "text": "1.9 Getting Help\nThe following resources are available to get help: - Start with AI chat bots and the course website to see if they can assist - Use the course Slack channel to ask classmates for help - Attend TA or Professor office hours (coming soon) - Use Slack or email to contact one of the course TAs - Use Slack or email to contact Professor Murff",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#pre-enrollment-assessment",
    "href": "index.html#pre-enrollment-assessment",
    "title": "STRAT 490R - Understanding AI: From Foundations to Strategy",
    "section": "1.10 Pre-enrollment Assessment",
    "text": "1.10 Pre-enrollment Assessment\nComing soon.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "00-math-review.html",
    "href": "00-math-review.html",
    "title": "2  Math and Python Review",
    "section": "",
    "text": "2.1 Calculus Essentials",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Math and Python Review</span>"
    ]
  },
  {
    "objectID": "00-math-review.html#calculus-essentials",
    "href": "00-math-review.html#calculus-essentials",
    "title": "2  Math and Python Review",
    "section": "",
    "text": "2.1.1 Why You Need Calculus in ML/AI\nNeural networks are functions trained to minimize prediction errors. To train them, we need to compute how changes in weights affect the output — and for that, we use differentiation and the chain rule.\n\n\n2.1.2 Derivatives\nA measure of how a function changes as its input changes.\nNotation:\n\n\\(\\frac{dy}{dx}\\): derivative of output \\(y\\) with respect to input \\(x\\)\n\n\\(f'(x)\\): shorthand for “the derivative of function \\(f\\) at \\(x\\)”\n\nExample:\nIf \\(f(x) = x^2\\), then \\(f'(x) = 2x\\)\n\n\n2.1.3 Partial Derivatives\nA derivative with respect to one variable while keeping others constant.\nNotation:\n$ $\nUsed in computing how the loss changes with respect to each model parameter.\n\n\n2.1.4 Chain Rule\nUsed to compute derivatives of composed functions (e.g., layer-by-layer in a neural network).\nFormula:\n\\[\n\\frac{dz}{dx} = \\frac{dz}{dy} \\cdot \\frac{dy}{dx}\n\\]\n\n\n2.1.5 Gradient\nA vector of all partial derivatives of a function with respect to each input.\nNotation:\n\\(\\nabla L = \\left[ \\frac{\\partial L}{\\partial w_1}, \\frac{\\partial L}{\\partial w_2}, \\ldots \\right]\\)\n\n\n2.1.6 Loss Function\nMeasures how wrong the model’s prediction is.\nExamples:\n- Mean Squared Error (MSE)\n- Cross-Entropy Loss\n\n\n2.1.7 Backpropagation\nAn algorithm that uses the chain rule to compute gradients efficiently in neural networks.\n\n\n2.1.8 Gradient Descent\nMethod used to update weights based on gradients.\nUpdate Rule:\n\\[\nw := w - \\eta \\cdot \\frac{\\partial L}{\\partial w}\n\\]\nWhere $ $ is the learning rate.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Math and Python Review</span>"
    ]
  },
  {
    "objectID": "00-math-review.html#linear-algebra-essentials",
    "href": "00-math-review.html#linear-algebra-essentials",
    "title": "2  Math and Python Review",
    "section": "2.2 Linear Algebra Essentials",
    "text": "2.2 Linear Algebra Essentials\n\n2.2.1 Why You Need Linear Algebra in ML/AI\nNeural networks use vectors and matrices to represent data, weights, and transformations.\n\n\n2.2.2 Vectors\nA 1D array of numbers.\n$ =\n\\[\\begin{bmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_n \\end{bmatrix}\\]\n$\n\n\n2.2.3 Matrices\nA 2D array of numbers.\n$ A =\n\\[\\begin{bmatrix} a_{11} & a_{12} \\\\ a_{21} & a_{22} \\end{bmatrix}\\]\n$\n\n\n2.2.4 Matrix-Vector Multiplication\nIf \\(A\\) is \\(m \\times n\\) and \\(\\vec{x}\\) is \\(n \\times 1\\), then \\(A \\vec{x}\\) is \\(m \\times 1\\).\n\n\n2.2.5 Dot Product\n\\(\\vec{a} \\cdot \\vec{b} = \\sum_{i=1}^{n} a_i b_i\\)\nUsed in similarity measures and basic model computations.\n\n\n2.2.6 Transpose\nSwitches rows and columns in a matrix.\n\\(A^T\\)\n\n\n2.2.7 Identity Matrix\nSquare matrix with 1s on the diagonal.\nActs like “1” for matrix multiplication.\n\\(AI = A\\)\n\n\n2.2.8 Matrix Multiplication\nCombines transformations.\nIf \\(A\\) is \\(m \\times n\\) and \\(B\\) is \\(n \\times p\\), then \\(C = AB\\) is \\(m \\times p\\).\n\n\n2.2.9 Norms\nMeasure the size or length of a vector.\nL2 norm:\n$| |_2 = $",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Math and Python Review</span>"
    ]
  },
  {
    "objectID": "00-math-review.html#probability-and-statistics-essentials",
    "href": "00-math-review.html#probability-and-statistics-essentials",
    "title": "2  Math and Python Review",
    "section": "2.3 Probability and Statistics Essentials",
    "text": "2.3 Probability and Statistics Essentials\n\n2.3.1 Why You Need Probability in ML/AI\nModels make predictions under uncertainty. Probability describes this uncertainty and informs how we evaluate and train models.\n\n\n2.3.2 Random Variables\nRepresent outcomes of random processes.\nDiscrete: number of heads\nContinuous: model confidence score\n\n\n2.3.3 Probability Distributions\nDiscrete: \\(P(X = x)\\)\nContinuous: \\(p(x)\\)\nExamples:\n- Bernoulli (binary outcomes)\n- Categorical (multi-class)\n- Gaussian/Normal (real-valued data)\n\n\n2.3.4 Expectation (Mean)\nDiscrete:\n\\(\\mathbb{E}[X] = \\sum_x x \\cdot P(X = x)\\)\nContinuous:\n\\(\\mathbb{E}[X] = \\int x \\cdot p(x) dx\\)\n\n\n2.3.5 Variance and Standard Deviation\n\\(\\mathrm{Var}(X) = \\mathbb{E}[(X - \\mathbb{E}[X])^2]\\)\n\\(\\sigma = \\sqrt{\\mathrm{Var}(X)}\\)\n\n\n2.3.6 Conditional Probability\n$ P(A B) = $\nUsed in next-token prediction:\n\\(P(\\text{next token} \\mid \\text{context})\\)\n\n\n2.3.7 Bayes’ Theorem\n$ P(A B) = $\n\n\n2.3.8 Entropy\n$ H(X) = -_x P(x) P(x) $\nMeasures uncertainty in a distribution.\n\n\n2.3.9 Cross-Entropy Loss\n\\(\\text{Loss} = -\\sum_i y_i \\log(\\hat{y}_i)\\)\nUsed in classification and language modeling.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Math and Python Review</span>"
    ]
  },
  {
    "objectID": "00-math-review.html#python-essentials-for-building-a-language-model",
    "href": "00-math-review.html#python-essentials-for-building-a-language-model",
    "title": "2  Math and Python Review",
    "section": "2.4 Python Essentials for Building a Language Model",
    "text": "2.4 Python Essentials for Building a Language Model\n\n2.4.1 Why Python?\nPython is widely used in AI due to its readability and powerful libraries like NumPy and PyTorch.\n\n\n2.4.2 Variables and Types",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Math and Python Review</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html",
    "href": "01-machine-learning.html",
    "title": "3  Machine Learning",
    "section": "",
    "text": "3.1 Machine Learning\nSupervised Learning: “Here’s the question and the right answer.”\nUnsupervised Learning: “Here is some data, can you find patterns and/or organize it in a meaningful way?”\nReinforcement Learning: “You’re an agent playing a, figure out the best strategy through trial and error, using only points (rewards) as feedback.”\n“During training, a machine learning algorithm processes a dataset and chooses the function that best matches the patterns in the data.”\nsupervised, unsupervised, and reinforcement.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#supervised-learning",
    "href": "01-machine-learning.html#supervised-learning",
    "title": "3  Machine Learning",
    "section": "3.2 Supervised Learning",
    "text": "3.2 Supervised Learning\nSupervised learning is the most widely used type of machine learning and significantly overlaps with the methodologies of other quantitative fields, such as statistics and econometrics.\nSupervised learning gets its name from the fact that the input data set has examples of both inputs and outputs.\nThe outputs are called labels, hence you will sometime hear the term “labeled dataset.”\n\nlogistic (sigmoid) function:\nSoftmax:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#simple-linear-regression",
    "href": "01-machine-learning.html#simple-linear-regression",
    "title": "3  Machine Learning",
    "section": "3.3 Simple Linear Regression",
    "text": "3.3 Simple Linear Regression\nA simple linear regression model is the simplest possible supervised machine learning model. It provides a clean and interpretable framework that allows us to explore many of the fundamental building blocks underlying cutting edge Large Language Models (LLMs) such as ChatGPT which we will get to later in the course. For this reason, we will take the time to study it in depth and build a deep understanding.\nA simple linear regression model takes a single input variable \\(x\\) and predicts the value of a corresponding output variable \\(y\\). For example, the input variable might represent a house’s square footage, and the output variable could represent the value of the home.\nWe can write down the relationship between square footage and value in the form of a mathematical equation (also called a mathematical function or a model):\n\\[\ny = w_0 + w_1 x\n\\]\nWhere \\(y\\) represents the home value and \\(x\\) represents the square footage.\nGeometrically this equation is a line with intercept \\(w_0\\) and slope \\(w_1\\).\n\n\n\n\n\n\n\n\nSimple Linear Regression Line\n\n\n\n\n\n\nFigure 3.1\n\n\n\n\n\n\n\n\n\nDifferences in mathematical notation\n\n\n\n\n\nIn machine learning jargon \\(w_0\\) and \\(w_1\\) are called the parameters or weights of the model (hence the use of \\(w\\) in the notation) and describe the nature of the relationship between \\(x\\) and \\(y\\). In other fields such as econometrics these might be introduced using the greek alphabet notation of \\(\\alpha\\) and \\(\\beta\\).\nFurthermore, you might recognize this equation as the equation for a line in slope-intercept from which is often presented as:\n\\[\ny = mx + b\n\\] where \\(x\\) and \\(y\\) are numbers in the coordinate plane with \\(m\\) representing the slope of the line and \\(b\\) representing the y-intercept (the point where the line crosses the y-axis) as shown in the image below:\n\n\n\n\n\nSimple linear regression and the equation of a line are in fact the same mathematical equation. In the context of linear regression, we simply use different notation: \\(w_1 = m\\) (the slope), and \\(w_0 = b\\) (the y-intercept which in machine learning is referred to as the bias term).\nIt’s common for different fields of study to use different notation and words for the same mathematical concepts. Unfortunately this can be one of the biggest sources of confusion for students so we will make an effort to call out these differences throughout the course.\n\n\n\n\\(w_0\\) and \\(w_1\\) represent numbers that the computer will learn (i.e. derive) based on what is observed in real life. To get the computer to learn these weights for us we have to communicate in a language that computers understand. That language is data. By data we simple mean numerical values in rows and columns in a spreadsheet or matrix. For our home value example this would mean two columns of data, one containing observed home values and the second containing the associated square footage of each home. A row would contain the value and the square footage for the same home. A small sample of data is illustrated below in both spreadsheet and matrix form. Spreadsheets are often helpful for illustration purposes but matrices are the data type we’ll use model fitting and evaluation.\n\n\n\n\n\n\nSpreadsheet-style for illustration\n\n\n\nHome ID\nSquare Footage (\\(x\\))\nHome Value (\\(y\\))\n\n\n\n\nH001\n1,200\n290,000\n\n\nH002\n1,400\n310,000\n\n\nH003\n1,600\n340,000\n\n\nH004\n1,800\n370,000\n\n\nH005\n2,000\n400,000\n\n\nH006\n2,200\n430,000\n\n\nH007\n2,400\n455,000\n\n\nH008\n2,600\n480,000\n\n\nH009\n2,800\n510,000\n\n\nH010\n3,000\n540,000\n\n\n\n\n\nMatrix-style the computer will use\n\\[\n\\begin{bmatrix}\n1200 & 290000 \\\\\n1400 & 310000 \\\\\n1600 & 340000 \\\\\n1800 & 370000 \\\\\n2000 & 400000 \\\\\n2200 & 430000 \\\\\n2400 & 455000 \\\\\n2600 & 480000 \\\\\n2800 & 510000 \\\\\n3000 & 540000 \\\\\n\\end{bmatrix}\n\\]\n\n\n\nNow that we’ve shown that simple linear regression is actually just the equation of a line we can have a visual picture in mind for how an input variable \\(x\\) and the output variable \\(y\\) are related.\n\n\n\n\n\n\nIntuition check\n\n\n\n\n\nWhat does your intuition tell you about the values \\(w_0\\) and \\(w_1\\) are likely to take on once they are estimated?\nDo you expect them to be positive or negative numbers?\nAssume \\(x\\) was \\(0\\), what would the equation be telling you?\n\n\n\nAs soon as we choose numbers for \\(w_0\\) and \\(w_1\\) have a way predic\nThe goal of machine learning is to learn the best possible values \\(w_0\\) and \\(w_1\\) allowing us to make good predictions of a homes value based on it’s square footage. We will soon explore how the computer “learns” and what we mean by “best.”\nOnce numerical values for \\(w_0\\) and \\(w_1\\) have been learned (i.e., derived), we obtain an equation that can be used to make predictions of home value based on square footage. For example, assume the learned weights are:\n\\[\nw_0 = 50,\\!000 \\quad \\text{and} \\quad w_1 = 200\n\\]\nThen the prediction function becomes:\n\\[\n\\hat{y} = 50,\\!000 + 200x\n\\]\nWe use the notation \\(\\hat{y}\\) (read as “y-hat”) to emphasize that this is a predicted value based on the model, not an observed or actual value.\nThis act of using the trained model to compute a prediction based on an input \\(x\\) is referred to as inference—we are inferring an estimated output \\(\\hat{y}\\).\nFor instance, a home with 3,000 square feet would be predicted to have a value of:\n\\[\n\\hat{y} = 50,\\!000 + 200 \\cdot 3,\\!000 = 650,\\!000\n\\]\nNow, consider what the model predicts for a home with 0 square feet:\n\\[\n\\hat{y} = 50,\\!000 + 200 \\cdot 0 = 50,\\!000\n\\]\nThis implies that the base value of the property—the land alone, with no house—might be interpreted as $50,000. This is exactly why both \\(w_0\\) and \\(w_1\\) are necessary. If we had included only \\(w_1 x\\) and omitted \\(w_0\\), the model would always predict 0 for an input of \\(x = 0\\), which might not reflect the reality (e.g., land still has value).\nIn machine learning, the term bias is used to refer to this \\(w_0\\) value. The name comes from the fact that it shifts (or “biases”) the entire output of the model up or down, independent of the input. Geometrically, it determines the \\(y\\)-intercept of the prediction line. It allows the model to better fit data that does not pass through the origin.\nChoosing a different set of weight values would result in a different equation, resulting in a different prediction. For example, assume instead that \\(w_0 = 25,000\\) and \\(w_1 = 300\\) resulting in the following equation:\n\\[\n\\hat{y} = 25,000 + 300 x\n\\]\nThis model would predict that the same 3,000 square-foot home has a value of \\(925,000 = 25,000+300*3,000\\).\n### Learning weight values\nIn the example above, we assumed \\(w_0 = 50,000\\) and \\(w_1 = 200\\) for illustation. We will now discuss how a machine (i.e., a computer) is capable of learning these weight values, enabling the mathematical model to make the most accurate predictions possible, which explains why the field is called machine learning.\nThere are three main ingredients necessary to learn the best possible model weights:\n\nA mathematical structure (i.e., a model) — This defines the form of the relationship between inputs and outputs. We’ve been discussing the simple linear regression structure given by:\n\n\\[\n\\hat{y} = w_0 + w_1 x\n\\]\nThis structure assumes a linear relationship between the input \\(x\\) and the predicted output \\(\\hat{y}\\). Later in the course, we will explore the more complex models used in large language models.\n\n\n\n\n\n\nWhat do we mean by “linear”?\n\n\n\n\n\n“Linear” in this context means that the effect of \\(x\\) on \\(\\hat{y}\\) is proportional and constant: no matter what value of \\(x\\) we choose, an increase of 1 unit in \\(x\\) always increases \\(\\hat{y}\\) by exactly \\(w_1\\) units. This property makes the model highly interpretable.\n\n\n\n\nTraining data — A set of example input-output pairs \\(\\{(x^{(i)}, y^{(i)})\\}_{i=1}^n\\) that the model uses to learn. For simple linear regression, you can think of this as two columns in a spreadsheet: one column for the input variable \\(x\\) (e.g., square footage) and one column for the corresponding output \\(y\\) (e.g., home price). Each row represents a single training example \\((x^{(i)}, y^{(i)})\\).\n\n\n\n\n\n\n\nNotation: Superscripts vs. Subscripts\n\n\n\n\n\nIf you’re coming from econometrics, you’re probably used to indexing observations using subscripts, like \\(x_i\\) and \\(y_i\\). In machine learning, we typically use superscripts, like \\(x^{(i)}\\) and \\(y^{(i)}\\), to denote the \\(i\\)-th training example.\nWhy the change?\nMachine learning models often work with vectors of features: \\[\nx^{(i)} = \\begin{bmatrix} x_1^{(i)} \\\\ x_2^{(i)} \\\\ \\vdots \\\\ x_d^{(i)} \\end{bmatrix}\n\\]\nHere:\n\nThe superscript \\((i)\\) indicates the \\(i\\)-th training example.\nThe subscript \\(j\\) (e.g., \\(x_j^{(i)}\\)) refers to the \\(j\\)-th feature of that example.\n\nUsing subscripts for both observations and features (e.g., \\(x_i\\) and \\(x_j\\)) would lead to confusion.\nSo while this might feel unfamiliar at first, superscript indexing is standard in ML to keep feature and example indexing clearly separated.\n\n\n\n\nA loss function — A mathematical expression that quantifies the error between the model’s predictions \\(\\hat{y}^{(i)}\\) and the true outputs \\(y^{(i)}\\). For regression, a common choice is mean squared error (MSE):\n\n\\[\n\\mathcal{L}(w_0, w_1) = \\frac{1}{n} \\sum_{i=1}^n (\\hat{y}^{(i)} - y^{(i)})^2\n\\]\nThe loss function defines the learning objective.\n\nAlgorithms — An algorithm is a step-by-step, well-defined procedure for performing a task. For example, long division is an algorithm wherein you follow a well defined procedure to computer mathematical operation that would be difficult to do mentally.In this course, the task we are performing is learning the optimal values for model weights. Hence, for our purposes, we will look at algorithms\n\nAlgorithms like gradient descent iteratively adjust weights to reduce this loss. These algorithms are the engine of learning.\nUnderstanding these mappings will help you bridge the language used in machine learning and econometrics and navigate both literatures more fluently. :::\n\n\n\n\n\n\nWhy are we calling this “supervised” machine learning and what other types are there?\n\n\n\n\n\n\n\n\n\nIn our example, training data,\nmachine learning algorithm\nparameters or “weights”\n(read as y-hat, the “hat” signifies that a prediction is being made. Writing \\(y\\) without the “hat” would mean no prediction has yet been attempted).\nuch as a zestimate from Zillow",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#glossary",
    "href": "01-machine-learning.html#glossary",
    "title": "3  Machine Learning",
    "section": "3.4 Glossary",
    "text": "3.4 Glossary\nSimple Linear Regression\nparameters or “weights”\ntraining data,\nmachine learning algorithm\ninference\nsupervised machine learning\n\n\\(w_0\\) is the intercept (bias term),\n\\(w_1\\) is the slope (weight).\n\nTo bring this to life, let’s consider a concrete where we’d like to predict the price of a home.\nLet:\n\n\\(\\hat{y}\\) be the predicted price of a house (in thousands of dollars),\n\\(x\\) be the size of the house in square feet.\n\nSuppose we have fit a linear model to a dataset and obtained:\n\\[\n\\hat{y} = 50 + 0.2 x\n\\]\nThis means: - The base price of any house (intercept) is $50,000. - For each additional square foot, the price increases by $200.\n\n3.4.1 Example\nFor a house that is 1,000 square feet:\n\\[\n\\hat{y} = 50 + 0.2 \\cdot 1000 = 250\n\\]\nSo, the model predicts a price of $250,000 for a 1,000 square foot house.\n\n\n3.4.1.1 Target Variable and Input Variable\n\nTarget Variable (\\(y\\)): the outcome we are trying to predict.\nInput Variable (\\(x\\)): the feature used to make the prediction.\n\n\n\n\n3.4.1.2 Training and Validation Sets\n\nTraining set: used to learn the model parameters.\nValidation set: used to evaluate how well the model generalizes to unseen data.\n\n\n\n\n3.4.1.3 Model Approximation and Noise\nThe model approximates an unknown true function: \\[\ny = f^*(x) + \\varepsilon\n\\] where \\(\\varepsilon\\) is the irreducible error.\n\n\n\n3.4.1.4 Residuals\nThe residuals measure the difference between actual and predicted values: \\[\ne_i = y_i - \\hat{y}_i\n\\]\n\n\n\n3.4.1.5 Loss Function (Mean Squared Error)\nTo measure model performance: \\[\n\\mathcal{L}(w_0, w_1) = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2\n\\]\n\n\n\n3.4.1.6 Design Matrix\nWith \\(n\\) observations, the design matrix includes a bias term: \\[\n\\mathbf{X} = \\begin{bmatrix}\n1 & x_1 \\\\\n1 & x_2 \\\\\n\\vdots & \\vdots \\\\\n1 & x_n\n\\end{bmatrix}\n\\]\n\n\n\n3.4.1.7 Closed-form Solution (Normal Equation)\nWe can directly compute the optimal weights: \\[\n\\mathbf{w} = (\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{y}\n\\]\n\n\n\n3.4.1.8 Parameters and Estimation\n\nParameters: \\(w_0\\), \\(w_1\\)\nGoal: estimate parameters that minimize the loss function\n\n\n\n\n3.4.1.9 Gradient Descent\nWhen a closed-form is not used, we apply an iterative optimization: \\[\nw_j \\leftarrow w_j - \\eta \\frac{\\partial \\mathcal{L}}{\\partial w_j}\n\\]\nWith gradients: \\[\n\\frac{\\partial \\mathcal{L}}{\\partial w_j} = -\\frac{2}{n} \\sum_{i=1}^n x_{ij}(y_i - \\hat{y}_i)\n\\]\n\n\n\n3.4.1.10 Overfitting and Underfitting\n\nUnderfitting: model too simple to capture data patterns\nOverfitting: model too complex, captures noise instead of signal\nValidation helps detect these behaviors.\n\n\n\n\n3.4.2 Multiple Linear Regression\n\n\n3.4.3 Logistic Regression\n\n\n3.4.4 Classification",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#loss-functions",
    "href": "01-machine-learning.html#loss-functions",
    "title": "3  Machine Learning",
    "section": "3.5 Loss Functions",
    "text": "3.5 Loss Functions\nA loss function is a mathematical function that measures the difference between a model’s predicted output and the true target value from a training dataset. It produces a scalar value representing the error for a single data point or the average error over a batch.\n\nCross entropy loss: “cross entropy” and “negative average log probability” related and often used interchangeably in practice.”\nPerplexity: “Perplexity is a measure often used alongside cross entropy loss to evaluate the performance of models in tasks like language modeling.”",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#gradient-descent-1",
    "href": "01-machine-learning.html#gradient-descent-1",
    "title": "3  Machine Learning",
    "section": "3.6 Gradient Descent",
    "text": "3.6 Gradient Descent\n\n\n\n\n\n\nSynonyms Across Fields\n\n\n\n\n\nDifferent disciplines often use different terms for the same concepts. Here’s a helpful guide:\n\n\n\n\n\n\n\n\nConcept\nMachine Learning\nStatistics / Econometrics\n\n\n\n\nSingle data point (e.g., a row in a spreadsheet)\nTraining example\nObservation, Case\n\n\nInput features\nFeatures, Inputs\nIndependent variables, Regressors, Covariates, Predictors\n\n\nTarget output\nLabel, Target, Output\nDependent variable, Response\n\n\nCollection of data points\nTraining set, Training data\nSample, Dataset\n\n\nParameter\nWeight (e.g., \\(w_1\\))\nCoefficient (e.g., \\(\\beta_1\\))\n\n\nModel prediction\n\\(\\hat{y}\\)\nFitted value, Predicted value\n\n\nLoss function\nLoss\nObjective function, Criterion function\n\n\nLearn model parameters\nTraining, Fitting\nEstimation\n\n\n\nUnderstanding these parallels can make it much easier to bridge terminology between fields as you move through the course.\n\n\n\n\n3.6.1 Supervised Learning Use Cases\nSupervised Learning (Regression) Use Cases\n\n\n\n\n\n\n\n\n\n\n\nUse Case\nSample Inputs\nModel Output Description\nWhat ML Question is Being Answered?\nWhat Business Question is Being Answered?\nExample Algorithm(s)\n\n\n\n\nPrice Prediction\nProperty size, location, features\nNumeric price\nWhat is the expected price of this item?\nHow should I price products to stay competitive and profitable?\nLinear Regression, CatBoost\n\n\nDemand Forecasting\nHistorical sales, promotions, holidays\nPredicted sales volume\nWhat will sales be next week/month?\nHow can I manage inventory or staffing to meet demand?\nLinear Regression, LSTM\n\n\nMedical Risk Score\nPatient vitals, history\nRisk score (e.g., probability of event)\nHow likely is a medical event to occur?\nHow should I prioritize preventive care for patients?\nRandom Forest, Ridge Reg.\n\n\nRevenue Forecasting\nPast financials, seasonality\nRevenue over next time period\nHow much revenue will we make?\nHow can I allocate budgets or set growth targets?\nTime Series Models, XGBoost\n\n\nEnergy Usage Estimation\nTime of day, weather, appliance use\nPredicted energy consumption\nHow much energy will be used in this period?\nHow should I manage power supply or optimize grid efficiency?\nLinear Regression, SVR\n\n\n\nSupervised Learning (Classification) Use Cases\n\n\n\n\n\n\n\n\n\n\n\nUse Case\nSample Inputs\nModel Output Description\nWhat ML Question is Being Answered?\nWhat Business Question is Being Answered?\nExample Algorithm(s)\n\n\n\n\nEmail Spam Detection\nEmail content, sender info, subject line\nBinary label: spam or not spam\nIs this email spam?\nHow can I prevent unwanted emails from reaching users’ inboxes?\nLogistic Regression, SVM\n\n\nCredit Risk Scoring\nIncome, credit history, employment data\nRisk category (e.g., low/medium/high)\nWill this applicant default?\nShould I approve this loan, and at what interest rate?\nDecision Tree, XGBoost\n\n\nImage Classification\nPixel values from an image\nObject class label (e.g., “cat”, “dog”)\nWhat object is in this image?\nHow can I organize photos or automate product tagging?\nCNNs, ResNet\n\n\nSentiment Analysis\nReview text, social media posts\nSentiment label (positive/negative)\nWhat sentiment is being expressed?\nWhat is the public opinion about my product or brand?\nNaive Bayes, BERT\n\n\nDisease Diagnosis\nSymptoms, test results, demographics\nDisease class (e.g., flu, COVID, none)\nWhat condition does this patient likely have?\nHow can I assist doctors in making accurate and timely diagnoses?\nRandom Forest, Neural Nets",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#unsupervised-learning",
    "href": "01-machine-learning.html#unsupervised-learning",
    "title": "3  Machine Learning",
    "section": "3.7 Unsupervised Learning",
    "text": "3.7 Unsupervised Learning\n\n3.7.1 Unsupervised Learning Use Cases\n\n\n\n\n\n\n\n\n\n\n\nUse Case\nSample Inputs\nModel Output Description\nWhat ML Question is Being Answered?\nWhat Business Question is Being Answered?\nExample Algorithm(s)\n\n\n\n\nCustomer Segmentation\nAge, income, purchase history\nCluster/group labels for each customer\nWhat types of customers exist in my data?\nHow can I tailor marketing strategies to different customer types?\nK-means, DBSCAN\n\n\nTopic Modeling\nArticles or documents\nTopics with keywords per document\nWhat topics are being discussed?\nWhat content themes resonate most with my audience or market?\nLDA, NMF\n\n\nAnomaly Detection\nTransaction logs, sensor data\nAnomaly score or binary flag\nWhich data points are unusual?\nAre there fraudulent transactions or system failures I need to act on?\nIsolation Forest, Autoencoder\n\n\nDimensionality Reduction\nHigh-dimensional features (e.g., pixels)\n2D or 3D projections for analysis or visualization\nHow can I reduce feature space while preserving info?\nHow can I visualize or simplify complex data for human analysis or modeling?\nPCA, t-SNE, UMAP\n\n\nMarket Basket Analysis\nSets of purchased items\nAssociation rules (A & B → C)\nWhat items co-occur frequently in purchases?\nWhich product bundles or cross-sell offers should I promote?\nApriori, FP-Growth\n\n\nWord Embedding\nText corpus\nWord vectors capturing semantic similarity\nWhat are the contextual relationships between words?\nHow can I build a smarter search engine or chatbot that understands language context?\nWord2Vec, GloVe\n\n\nImage Compression\nRaw pixel arrays\nCompressed version of the image\nHow can I represent this image with fewer features?\nHow can I reduce storage or transmission costs for image data?\nAutoencoders",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "01-machine-learning.html#reinforcement-learning",
    "href": "01-machine-learning.html#reinforcement-learning",
    "title": "3  Machine Learning",
    "section": "3.8 Reinforcement Learning",
    "text": "3.8 Reinforcement Learning\n\n3.8.1 Reinforcement Learning Use Cases\n\n\n\n\n\n\n\n\n\n\n\nUse Case\nSample Inputs\nModel Output Description\nWhat ML Question is Being Answered?\nWhat Business Question is Being Answered?\nExample Algorithm(s)\n\n\n\n\nGame Playing\nGame state (e.g., board, score)\nAction to take\nWhat should I do to win the game?\nHow can I build an AI that outperforms humans or creates adaptive gameplay?\nQ-learning, DQN\n\n\nRobotics & Control\nSensor data (angles, velocities, etc.)\nMovement or control signals\nHow should the agent move next to reach a goal?\nHow can I automate physical tasks like picking, sorting, or navigating?\nPPO, SAC, DDPG\n\n\nAutonomous Vehicles\nSensor input (camera, LIDAR, speed, GPS)\nDriving action\nWhat’s the optimal next driving move?\nHow can I develop a safe and efficient self-driving vehicle system?\nDeep RL + sensor fusion\n\n\nRecommendation Systems\nUser history, preferences, session behavior\nRecommended item\nWhat should I recommend next?\nHow can I increase user retention, engagement, or sales?\nContextual Bandits, RL\n\n\nPortfolio Management\nFinancial indicators, stock prices\nAsset allocation decision\nHow should I invest to maximize return?\nHow can I build an automated trading or portfolio optimization system?\nActor-Critic methods\n\n\nPersonalized Education\nStudent progress and quiz results\nNext learning step\nWhat lesson or content should come next?\nHow can I boost student outcomes by personalizing learning pathways?\nMulti-armed bandits\n\n\nHealthcare Treatment\nPatient history and vitals\nTreatment or intervention strategy\nWhat care plan maximizes long-term patient health?\nHow can I optimize healthcare outcomes while reducing costs and readmissions?\nOff-policy RL, POMDPs",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html",
    "href": "02-deep-learning.html",
    "title": "4  Deep Learning",
    "section": "",
    "text": "4.1 Neural Networks\n“Before the advent of transformers, recurrent neural networks (RNNs) were the most popular encoder–decoder architecture for language translation.”\n“An RNN is a type of neural network where outputs from previous steps are fed as inputs to the current step, making them well-suited for sequential data like text.” (Raschka (2024))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#glossary",
    "href": "02-deep-learning.html#glossary",
    "title": "4  Deep Learning",
    "section": "4.2 Glossary",
    "text": "4.2 Glossary\n\nInput Layer: Layer 0. This layer holds the input features. It doesn’t perform any computation — it just passes the input values into the network.\nHidden Layer(s): Layers 1 to n. These are the intermediate layers between input and output. They apply learned weights, biases, and activation functions to transform the data. There may be one or many hidden layers depending on the depth of the network.\nOutput Layer: Layer n+1. This is the final layer that produces the network’s prediction. Its activation function is often task-specific (e.g., softmax for classification, linear for regression).\nNeuron:\nPerceptron:\nMulti-layer Perceptron:\nActivation:\nForward propagation:\nBackpropagation:\nEpoch: One epoch = the model has seen every example in the training dataset once. Training a model involves multiple epochs so it can gradually learn patterns. With each epoch, the model updates its weights using backpropagation, ideally reducing the loss function. If your dataset has 10,000 examples and your batch size is 100, then you’ll have 100 batches per epoch. LLM pretraining will often have just 1–3 epochs over a huge corpora (due to dataset size and overfitting risk)\nTraining example: A sequence of tokens, often 512–8192 in a modern LLM.\nBatch: A set of examples processed together",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#traditional-presentation-of-logistic-regression",
    "href": "02-deep-learning.html#traditional-presentation-of-logistic-regression",
    "title": "4  Deep Learning",
    "section": "4.3 Traditional Presentation of Logistic Regression",
    "text": "4.3 Traditional Presentation of Logistic Regression\nLogistic regression is commonly introduced as a linear model used for binary classification. Given an input vector \\(x \\in \\mathbb{R}^n\\), the model computes a linear combination of the inputs and passes it through the sigmoid activation function to produce a probability between 0 and 1.\n\n4.3.1 Model Equation\n\\[\n\\hat{y} = \\sigma(w^\\top x + b)\n= \\frac{1}{1 + e^{-(w_1 x_1 + w_2 x_2 + \\cdots + w_n x_n + b)}}\n\\]\nWhere:\n\n\\(x = [x_1, x_2, \\dots, x_n]^\\top\\) is the input feature vector\n\\(w = [w_1, w_2, \\dots, w_n]^\\top\\) is the weight vector\n\\(b\\) is the bias (intercept) term\n\\(\\sigma(z)\\) is the sigmoid function: \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#matrix-form",
    "href": "02-deep-learning.html#matrix-form",
    "title": "4  Deep Learning",
    "section": "4.4 Matrix Form",
    "text": "4.4 Matrix Form\nWe can express the same model in matrix notation:\n\\[\nz = w^\\top x + b\n\\quad \\text{and} \\quad\n\\hat{y} = \\sigma(z)\n\\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#interpretation",
    "href": "02-deep-learning.html#interpretation",
    "title": "4  Deep Learning",
    "section": "4.5 Interpretation",
    "text": "4.5 Interpretation\nThis model predicts the probability that the output class is 1, given input \\(x\\). It is typically trained using binary cross-entropy loss (also known as log loss):\n\\[\n\\mathcal{L}(y, \\hat{y}) = -y \\log(\\hat{y}) - (1 - y) \\log(1 - \\hat{y})\n\\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#rewriting-logistic-regression-as-a-neural-network",
    "href": "02-deep-learning.html#rewriting-logistic-regression-as-a-neural-network",
    "title": "4  Deep Learning",
    "section": "4.6 Rewriting Logistic Regression as a Neural Network",
    "text": "4.6 Rewriting Logistic Regression as a Neural Network\nNow we observe that this model is mathematically equivalent to a one-layer neural network:\n\nInputs: \\(x_1, x_2, x_3, \\dots\\)\nOne output neuron\nSigmoid activation\nA bias term modeled as a fixed input node with value 1 and a learnable weight\n\nSee the previous section for a diagram and matrix breakdown of this equivalent neural network.\nModels can be in different modes, evaluation mode.\n\n\n\n\n\nflowchart LR\n    %% Input nodes\n    X1((x1))\n    X2((x2))\n    X3((x3))\n    B((1)):::bias\n\n    %% Output node\n    Y((ŷ))\n\n    %% Weighted connections\n    X1 --&gt;|w1| Y\n    X2 --&gt;|w2| Y\n    X3 --&gt;|w3| Y\n    B --&gt;|b| Y\n\n    classDef bias fill:#eee,stroke:#333,stroke-width:2px;\n\n\n\n\n\n\n\n4.6.1 Mathematical Representation\nLogistic regression with a bias term can be interpreted as a neural network with:\n\nInput vector \\(\\, \\tilde{x} \\in \\mathbb{R}^4 \\,\\), including a constant 1 for bias\nWeight vector \\(\\, \\tilde{w} \\in \\mathbb{R}^4 \\,\\)\nSigmoid activation at the output\n\n\n4.6.1.1 Input vector (with bias):\n\\[\n\\tilde{x} =\n\\begin{bmatrix}\n1 \\\\\nx_1 \\\\\nx_2 \\\\\nx_3\n\\end{bmatrix}\n\\]\n\n\n4.6.1.2 Weight vector (including bias):\n\\[\n\\tilde{w} =\n\\begin{bmatrix}\nb \\\\\nw_1 \\\\\nw_2 \\\\\nw_3\n\\end{bmatrix}\n\\]\n\n\n4.6.1.3 Linear combination:\n\\[\nz = \\tilde{w}^\\top \\tilde{x}\n= b + w_1 x_1 + w_2 x_2 + w_3 x_3\n\\]\n\n\n4.6.1.4 Sigmoid output:\n\\[\n\\hat{y} = \\sigma(z) = \\frac{1}{1 + e^{-z}}\n\\]\n\n\n\n\n4.6.2 Summary Table\n\n\n\n\n\n\n\n\n\nElement\nSymbol\nShape\nNotes\n\n\n\n\nInput (with bias)\n\\(\\, \\tilde{x} \\,\\)\n\\(\\, \\mathbb{R}^{4 \\times 1} \\,\\)\n3 features + 1 bias\n\n\nWeights (with bias)\n\\(\\, \\tilde{w} \\,\\)\n\\(\\, \\mathbb{R}^{4 \\times 1} \\,\\)\nlearnable params\n\n\nOutput\n\\(\\, \\hat{y} \\,\\)\n\\(\\, \\mathbb{R} \\,\\)\nscalar probability\n\n\n\nThis is a Shinylive application embedded in a Quarto doc.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "02-deep-learning.html#neural-network-architectures",
    "href": "02-deep-learning.html#neural-network-architectures",
    "title": "4  Deep Learning",
    "section": "4.7 Neural Network Architectures",
    "text": "4.7 Neural Network Architectures\nToday, nearly all state-of-the-art AI systems, including ChatGPT, are built around transformer architectures — which themselves rely heavily on feedforward networks as core subcomponents. However, other architectures like CNNs and RNNs continue to play crucial roles in specific areas such as computer vision and on-device speech processing.\n\n\n\n\n\n\n\n\nArchitecture\nDescription\nCommon Use Cases\n\n\n\n\nFeedforward Neural Network (FNN)\nThe simplest type of neural network where data flows in one direction—from input to output—through one or more hidden layers. No memory or recurrence. Often called a Multilayer Perceptron (MLP).\nImage classification (with vector inputs), tabular data prediction, building blocks in LLMs (e.g., transformer feedforward layers)\n\n\nConvolutional Neural Network (CNN)\nUses convolutional layers with local filters and shared weights to process spatial or grid-like data. Often followed by pooling layers to reduce dimensionality.\nImage and video recognition, object detection, facial recognition, medical imaging\n\n\nRecurrent Neural Network (RNN)\nDesigned for sequential data. Uses internal memory (hidden state) to capture dependencies across time steps. Each output depends on previous inputs.\nLanguage modeling, time-series forecasting, speech recognition\n\n\nLong Short-Term Memory (LSTM) / GRU\nVariants of RNNs that solve the vanishing gradient problem. Maintain long-range dependencies using gated mechanisms.\nMachine translation, stock price prediction, chatbot state tracking\n\n\nTransformer\nUses self-attention to weigh relationships between tokens in a sequence. Does not rely on recurrence. Stacked layers often include self-attention + feedforward sub-layers.\nLarge Language Models (GPT, BERT), translation, code generation, question answering\n\n\nAutoencoder\nLearns a compressed (latent) representation of input data and reconstructs it. Composed of an encoder and decoder. Often unsupervised.\nDimensionality reduction, denoising images, anomaly detection\n\n\nGenerative Adversarial Network (GAN)\nConsists of a generator and a discriminator in a game-theoretic setup. The generator creates synthetic data; the discriminator judges real vs. fake.\nImage synthesis, data augmentation, deepfake generation, art creation\n\n\n\n\n\n\n\nRaschka S (2024) Build a large language model (from scratch) (Manning).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Deep Learning</span>"
    ]
  },
  {
    "objectID": "03-llms.html",
    "href": "03-llms.html",
    "title": "5  Large Language Models",
    "section": "",
    "text": "5.1 Glossary",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#words-represented-as-numbers",
    "href": "03-llms.html#words-represented-as-numbers",
    "title": "5  Large Language Models",
    "section": "5.2 Words represented as numbers",
    "text": "5.2 Words represented as numbers\n2000 - Bag of Words 2013 - Word2Vec 2017 - Attention",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#key-terms",
    "href": "03-llms.html#key-terms",
    "title": "5  Large Language Models",
    "section": "5.3 Key Terms",
    "text": "5.3 Key Terms\n\nVector:\nMatrix:\nDimension:\nCharacter:\nText string: A sequence of characters forming natural language (e.g., “The quick brown fox”).\nCorpus:\nTokenizer: An algorithm that splits a text string into ‘tokens.’\nTokenization: The process of using a tokenizer to split a text string into smaller units (tokens), typically words or subword fragments.\nToken: A single unit resulting from tokenization, often a word or part of a word.\nVocabulary: A fixed list of all known tokens. Each token is mapped to a unique integer (token ID).\nToken ID: A unique integer assigned to a token by a tokenizer. In Word2Vec, token IDs are not used or exposed. Instead, the token is represented directly as a character string.\nEmbedding Model: An embedding model is a model that transforms each input token—either a character string or a token ID—into a vector of real numbers. The elements of this vector capture aspects of the token’s semantic meaning, syntactic role, and relationships to other tokens in the corpus. These vector representations can then be used as input to downstream machine learning models for tasks such as classification, clustering, translation, or text generation.\n\nWord2Vec – A neural model that creates static word embeddings based on word co-occurrence. Pre-trained versions (such as the Google News model) are available off the shelf using the gensim library.\n\nEmbedding: A vector that represents a token’s learned meaning and context. GPT-2 era models typically use embedding sizes of 768 dimensions, while GPT-3 models use much larger embeddings—up to 12,288 dimensions for the largest model variants (source: Build LLMs from Scratch). Embeddings can be derived from off-the-shelf models like Word2Vec, but modern large language models (LLMs) learn these embeddings during training as part of an integrated process, rather than relying on pre-trained static embeddings. Embeddings can also be created for larger units such as sentences, paragraphs, or entire documents.\nEmbedding Matrix: A matrix in which each row contains the embedding vector for a particular token. It functions as a lookup table to retrieve the embedding for a given token (Word2Vec) or in modern LLMs a token ID. The embedding matrix is a core component of what is commonly referred to as the embedding layer in neural network models.\nEmbedding layer: A layer in a neural network that maps discrete input tokens—typically represented by token IDs—into continuous vector representations by retrieving rows from an embedding matrix. During training, this matrix is randomly initialized and then updated via backpropagation to learn useful representations. After training, the embedding layer functions as a fixed lookup table that outputs meaningful vectors for each token.\nRotary Embedding (RoPE): Positial embedding information is added at the self embedding layer.\nMixture of Experts: variant of tranformation model.\n\nRouter\n\nGenerative vs Representation Models: “Representation models are LLMs that do not generate text but are commonly used for task-specific use cases, like classification, whereas generation models are LLMs that generate text, like GPT models. Although generative models are typically the first thing that comes to mind when thinking about LLMs, there is still much use for representation models.” (Alammar and Grootendorst (2024))\n\n“In other words, the embedding layer is essentially a lookup operation that retrieves rows from the embedding layer’s weight matrix via a token ID.”\n\nTensor:\nShape: The dimensions of a tensor — specifically, the number of elements along each axis.\n\n\n\n\n\n\n\n\n\n\nTensor Type\nRank\nExample Shape\nExample Description\n\n\n\n\nScalar\n0\n()\nA single number (e.g., 5)\n\n\nVector\n1\n(3,)\nA list of numbers (e.g., [5, 2, 7])\n\n\nMatrix\n2\n(3, 4)\nA 2D table (e.g., 3 rows × 4 columns)\n\n\n3D Tensor\n3\n(10, 3, 4)\nA stack of 10 matrices, each 3×4\n\n\nn-D Tensor\nn\n(d1, d2, ..., dn)\nAny n-dimensional array\n\n\n\n\nBackpropogation: The algorithm used to train neural networks by adjusting the model’s weights to reduce error.\nFeedforward: The process of passing input data through a neural network to produce an output. Data flows forward from the input layer through one or more hidden layers to the output layer. At each layer, neurons apply a weighted sum and an activation function (e.g., ReLU, GELU) to produce their outputs. No learning or weight updates happen during this step — it’s just computing the prediction. This is how the model computes predictions, whether during training or inference.\nLogits: “The model outputs, which are commonly referred to as logits”\nDense Vector: A vector in which most or all elements are non-zero and explicitly stored. In NLP, dense vectors (such as embeddings) represent features in a compact, continuous space and are learned during model training.\n\nInput → Feedforward → Prediction ↓ Loss Computation ↓ Backpropagation (Gradients) ↓ Optimization (Weight Update) ↓ Next iteration\nStochastic Gradient Descent:\nBatched Matrix Multiplication:\n– Transformer: Does not use an RRN.\n\nBERT: Encoder only. Good at language translation but not other tasks.\nMasked Language Modeling: Mask some of the input words and predict them.\nGenerative Models: Decoder only models.\nGPT: Generative Pretrained Transformer.\nContext Length\nGPU:\nScaled dot-product attention:\nContext vectors:\nWeight Matrix: Generic term that can refer to any trainable matrix where each element is a weight that gets updated during training.\n\nDuring training, each batch of data goes through a feedforward pass to compute a prediction, then a backpropagation pass to update the model’s weights.\nExcerpt From Build a Large Language Model (From Scratch) Sebastian Raschka This material may be protected by copyright.\n\nInput embedding: The final vector input to the model for each token, typically formed by summing token embeddings with positional (and optional segment) embeddings.\nDetokenization - The process of reconstructing a human-readable string from tokens.\nEmbeddings can be combined\n\nWord, Sentence, Document\n\nVocabulary (Bag of Words): distint list of tokens\nEncoder - The goal of an encoder is to convert input data—such as text—into a numerical representation (embedding) that captures its meaning, structure, and context. In the context of language models, encoders are designed to understand and represent the input text in a way that can be used for downstream tasks like classification, translation, or generation. Mathematically an encoder is often a recurrent neural network.\nDecoder - Goals is to generate language. Takes as inputs, embeddings, and then maps those embeddings to new embeddings, i.e. lanauge translation.\nBag-of-Words\nWord2Vec - A pre-trained model that creates word embeddings. Available off the shelf.\n\nVector Embeddings - Captures the meaning of words. Each Vector (word) embedding represents an aspect of the relationship a given word has with many other words. Each entry in a vector embedding is a number that measures something about the relationship between a word and the word the vector represents. Each vector embedding can have 1024 entries or more. The values of each entry are derived from the perameters of a neural network.\n\n“The main idea behind Word2Vec is that words that appear in similar contexts tend to have similar meanings.” Excerpt From Build a Large Language Model (From Scratch) Sebastian Raschka This material may be protected by copyright.\n\nStatic embeddings. e.g. bank has the same embedding regardless if the sentence is “bank of a river” or “going to the bank”\n\nNeural network\n\nRecurrent Neural Networks - precludes parallelization. This is why the tranformer architecture was so powerful as it allows parallelization.\n\nParameters: “In the context of deep learning and LLMs like GPT, the term “parameters” refers to the trainable weights of the model. ” “These weights are essentially the internal variables of the model that are adjusted and optimized during the training process to minimize a specific loss function.”\nAutoregressive - decoders produce one new token at a time, taking the all previous tokens as input to predict the next best token.\nProjection Matrices\n\nQuery Projection\nKey Projection\nValue Projection\n\nMulti query attention\nGrouped query attention\n\nFeedforward Neural Network\nSelf-attention (encoder???). works by seeing how similar each word is to all of the words in the sentence, including it self. Calculates the simliarity between every every word in the sentence.\n\nTakes the longest and most computation. W\nAttention head\n\nAttention - First introduced in 2014. got big in 2017. Attention allows a model to focus on parts of the input that are relevant to on another. Attend to one another and amplify their signal. Attention selectively determines which words are most important in a given sentence.\nAttention: “weights”, “attends to”, “pays attention to” each input tokens embedding indepentently based on where it is in the input and output. “A way for the model to”pay attention” to different input tokens when processing each token, so it can focus more on the relevant words, even if they’re far away in the sequence.”",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#scaled-dot-product-attention",
    "href": "03-llms.html#scaled-dot-product-attention",
    "title": "5  Large Language Models",
    "section": "5.4 Scaled Dot-Product Attention",
    "text": "5.4 Scaled Dot-Product Attention\nThe core equation for attention used in Transformers is:\n\\[\n\\text{Attention}(Q, K, V) = \\text{softmax}\\left( \\frac{QK^\\top}{\\sqrt{d_k}} \\right)V\n\\]\n\n5.4.1 Explanation of Terms\n\n\\(Q\\): Query matrix (sequence length × \\(d_k\\))\n\\(K\\): Key matrix (sequence length × \\(d_k\\))\n\\(V\\): Value matrix (sequence length × \\(d_v\\))\n\\(d_k\\): Dimensionality of the key vectors (used for scaling)\n\n\n\n5.4.2 Intuition\n\nCompute the dot product between \\(Q\\) and \\(K\\): \\(QK^\\top\\)\nScale by \\(\\sqrt{d_k}\\) to control the magnitude\nApply softmax to get attention weights\nMultiply by \\(V\\) to get the final weighted output\n\nThe Terms Query, Key, Value come from database terminology (Starmer (2025))\n\nMasked self-attention (decoder) - removed upper diagonal. Also called Causal self-attention\nCausal self-attention:\nMulti-head attention:\nHidden states of a word can be passed to a decoder. Hidden states are a vector representation.\nBERT 2018 - Encoder only architecture. Forms the basis for most of the embedding models that are popular today for RAG.\nCLS token\nMasked lanaguage modeling. Predict the masked words. Pre-trainiing. Fine tune for downstream tasks.\nGenerative models use a different architecture. Decoders only. GPT-1. Generative pretrained transformer\nContext length, GPT\n\nEach word has a static embedding from Word2Vec. These embeddings are passed to the encoder as a set. The individual embeddings are then combined into a single “context” embedding. The “context” embedding is then passed to the decoder.\nOnce students understand static embeddings (Word2Vec), it becomes much more intuitive to explain: “Now imagine that the same word has a different vector depending on its sentence context — that’s what GPT does.”\nWord2Vec was a milestone in NLP (2013), and understanding it provides insight into how word embeddings evolved from: Bag of Words → TF-IDF → Word2Vec → GloVe → Contextual embeddings (BERT/GPT)\n\nBag of Words and TF-IDF (symbolic → numeric)\nWord2Vec (static embeddings, co-occurrence-based learning)\nGloVe (matrix factorization variant)\nfastText (subword embeddings and OOV handling)\nBERT/GPT embeddings (contextual, dynamic)\nEmbeddings as foundation for downstream tasks\n\n\nLM Head: Token probability calculation. Probability\nDecoding Strategy\n\nGreedy decoding: Temperature = 0\ntop_p: Temperature &gt; 0\n\nTemperature Parameter:\nReinforcement learning from human feedback (RLHF)\nRelevance scoring:\nProjection:\nByte Pair Encoding (BPE): “Builds its vocabulary by iteratively merging frequent characters into subwords and frequent subwords into words. For example, BPE starts with adding all individual single characters to its vocabulary (“a,” “b,” etc.). In the next stage, it merges character combinations that frequently occur together into subwords. For example, “d” and “e” may be merged into the subword “de,” which is common in many English words like “define,” “depend,” “made,” and “hidden.” The merges are determined by a frequency cutoff.”\nLayer normalization: “The main idea behind layer normalization is to adjust the activations (outputs) of a neural network layer to have a mean of 0 and a variance of 1, also known as unit variance. This adjustment speeds up the convergence to effective weights and ensures consistent, reliable training. In GPT-2 and modern transformer architectures, layer normalization is typically applied before and after the multi-head attention module”\nBatch normalization: “normalizes across the batch dimension vs layer normalization which normalizes across the feature dimension”\nShortcut connections, also known as skip or residual connections - “a shortcut connection creates an alternative, shorter path for the gradient to flow through the network by skipping one or more layers, which is achieved by adding the output of one layer to the output of a later” “Shortcut connections are a core building block of very large models such as LLMs, and they will help facilitate more effective training by ensuring consistent gradient flow across layers”\nVanishing gradient: “problem refers to the issue where gradients (which guide weight updates during training) become progressively smaller as they propagate backward through the layers, making it difficult to effectively train earlier layers.”\nLoss Function:\nTransformer Block : “combines multi-head attention, layer normalization, dropout, feed forward layers, and GELU activations” “outputs of the transformer block are vectors of the same dimension as the input, which can then be fed into subsequent layers in an LLM.” “a core structural component of GPT models, combining masked multi-head attention modules with fully connected feed forward networks that use the GELU activation function.”\nWeight Tying:\nSoftmax:\nTraining example:\nBatch:\nOutputs of the layer:\nDropout: “ there are three distinct places where we used dropout layers: the embedding layer, shortcut layer, and multi-head attention module.”",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#how-llms-work",
    "href": "03-llms.html#how-llms-work",
    "title": "5  Large Language Models",
    "section": "5.5 How LLMs work",
    "text": "5.5 How LLMs work\nTransformers are a typer of neural network.\nUnlike earlier neural networks (like RNNs or CNNs), Transformers rely entirely on attention mechanisms and avoid recurrence, allowing for better parallelization and performance on long sequences.\nTransformers have three components: 1. Word Embedding 2. Positional Encoding - keeps track of word order 3. Attention\nTransformer LLMs generate their output one token at a time.\nTransformer has three major components: 1. Tokenizer 2. Tranformer Block - Most of them computation happens here. This is where the main neural network models live. GPT-3.5 had about 96 transformer blocks. - self attention layer - Relevance scoring - Combining information - Feed forward neural network 3. LM Head - Also a neural network. - Only recieves the final token from the input sequence and then predicts the next word.\nTransformers process their input tokens in parallel. If an input prompt has 16,000 tokens, the model will process this many tokens in parallel.\nKV Caching.\nTime to first token. How",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#hyperparameters",
    "href": "03-llms.html#hyperparameters",
    "title": "5  Large Language Models",
    "section": "5.6 Hyperparameters",
    "text": "5.6 Hyperparameters\n\n5.6.1 Model Architecture\n\n\n\n\n\n\n\n\nHyperparameter\nDescription\nTypical Values / Notes\n\n\n\n\nvocab_size\nNumber of unique tokens in the vocabulary\n30,000 – 100,000+\n\n\nmax_position_embeddings\nMaximum input sequence length\n128 – 2048+\n\n\nd_model\nEmbedding & hidden size\n128 – 12,288 (GPT-3 uses 12,288)\n\n\nnum_layers / n_layers\nNumber of Transformer blocks\n2 – 96+\n\n\nnum_heads / n_heads\nNumber of attention heads per block\nMust divide evenly into d_model\n\n\nd_ff / ffn_dim\nFeedforward network hidden size\nTypically 4 × d_model\n\n\ndropout_rate\nDropout probability\n0.0 – 0.3\n\n\nactivation_function\nActivation used in FFN\n\"relu\", \"gelu\", \"silu\"\n\n\nlayer_norm_eps\nSmall constant for LayerNorm stability\n1e-12 – 1e-5\n\n\n\n\n\n5.6.2 Attention Mechanism\n\n\n\n\n\n\n\n\nHyperparameter\nDescription\nTypical Values / Notes\n\n\n\n\nattention_dropout\nDropout on attention weights\nHelps regularize training\n\n\nuse_bias\nWhether projection layers have bias\nTrue / False\n\n\nuse_scaled_dot_product\nUse scaled dot-product attention\nUsually True\n\n\nrelative_position_encoding\nUse relative instead of absolute positions\nUsed in Transformer-XL, T5, etc.\n\n\n\n\n\n5.6.3 Training Configuration\n\n\n\n\n\n\n\n\nHyperparameter\nDescription\nTypical Values / Notes\n\n\n\n\nlearning_rate\nInitial learning rate\n1e-5 – 1e-3\n\n\nbatch_size\nExamples per batch\n8 – 2048\n\n\nnum_epochs\nNumber of passes through training data\n3 – 50+\n\n\nweight_decay\nL2 regularization coefficient\n0.0 – 0.1\n\n\ngradient_clip_norm\nClip gradients to this norm\n0.5 – 1.0\n\n\noptimizer\nOptimization algorithm\nAdam, AdamW, AdaFactor, etc.\n\n\nlearning_rate_scheduler\nAdjust learning rate over time\nlinear, cosine, constant, etc.\n\n\nwarmup_steps\nSteps before learning rate decay\n500 – 10,000+\n\n\n\n\n\n5.6.4 Tokenizer & Embeddings\n\n\n\n\n\n\n\n\nHyperparameter\nDescription\nNotes\n\n\n\n\ntokenizer_type\nTokenization algorithm\nBPE, WordPiece, SentencePiece\n\n\nshare_embeddings\nShare encoder & decoder embeddings\nUsed in T5\n\n\n\n\n\n5.6.5 Decoder-Specific\n\n\n\n\n\n\n\n\nHyperparameter\nDescription\nNotes\n\n\n\n\nuse_encoder_decoder\nWhether model includes a decoder\nTrue for T5, translation, etc.\n\n\ndecoder_num_layers\nNumber of decoder layers\nCan differ from encoder\n\n\ncross_attention\nEnables decoder to attend to encoder output\nRequired in encoder-decoder models",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "03-llms.html#understanding-attention",
    "href": "03-llms.html#understanding-attention",
    "title": "5  Large Language Models",
    "section": "5.7 Understanding Attention",
    "text": "5.7 Understanding Attention\nBy computing an attention weight, you are asking the question:\nHow similar is a given token to every other token in the input sequence as measured by the dot product between each pair of embeddings? We then normalized this set of weights using the softmax function which ensure that all the weights sum to 1. for a given token.\n\n\n\n\nAlammar J, Grootendorst M (2024) Hands-on large language models (O’Reilly).\n\n\nStarmer J (2025) Attention in transformers: Concepts and code in PyTorch.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "04-strategy.html",
    "href": "04-strategy.html",
    "title": "6  AI Strategy",
    "section": "",
    "text": "6.1 The Impacts of AI",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>AI Strategy</span>"
    ]
  },
  {
    "objectID": "04-strategy.html#things-as-they-really-are",
    "href": "04-strategy.html#things-as-they-really-are",
    "title": "6  AI Strategy",
    "section": "6.2 Things as They Really Are",
    "text": "6.2 Things as They Really Are",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>AI Strategy</span>"
    ]
  },
  {
    "objectID": "04-strategy.html#using-ai-for-good",
    "href": "04-strategy.html#using-ai-for-good",
    "title": "6  AI Strategy",
    "section": "6.3 Using AI for Good",
    "text": "6.3 Using AI for Good",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>AI Strategy</span>"
    ]
  },
  {
    "objectID": "90-resources.html",
    "href": "90-resources.html",
    "title": "7  Resources",
    "section": "",
    "text": "7.1 Videos\nLet’s build GPT: from scratch, in code, spelled out by Andrej Karpathy\nNeural Networks Visually by 3Blue1Brown\nThe 35 Year History of LLMs\nhttps://x.com/karpathy/status/1917961248031080455",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "90-resources.html#tokenizers",
    "href": "90-resources.html#tokenizers",
    "title": "7  Resources",
    "section": "7.2 Tokenizers",
    "text": "7.2 Tokenizers\nByte Pair Encoding (BPE) “builds its vocabulary by iteratively merging frequent characters into subwords and frequent subwords into words. For example, BPE starts with adding all individual single characters to its vocabulary (“a,” “b,” etc.). In the next stage, it merges character combinations that frequently occur together into subwords. For example, “d” and “e” may be merged into the subword “de,” which is common in many English words like “define,” “depend,” “made,” and “hidden.” The merges are determined by a frequency cutoff.” (Raschka (2024))\n\n\n\n\n\n\n\n\nTokenizer Type\nUsed In\nDescription\n\n\n\n\nWordPiece\nBERT, DistilBERT, ALBERT\nSplits words into frequent subword units using a greedy longest-match-first algorithm. Handles rare or unknown words by decomposing them into known parts.\n\n\nByte Pair Encoding (BPE)\nGPT-2, GPT-Neo, RoBERTa\nUses a data-driven merge process to combine frequently occurring character pairs into subwords. Efficient and balances vocabulary size with coverage.\n\n\nByte-Level BPE\nGPT-2, GPT-3, GPT-4\nA variant of BPE that operates at the byte level, enabling robust handling of any UTF-8 text (including emojis and accents). No need for pre-tokenization.\n\n\nSentencePiece\nT5, XLNet, some ALBERT versions\nTrains directly on raw text (with or without spaces). Supports BPE or Unigram language model algorithms. Useful for languages without whitespace delimiters.\n\n\nCustom (Hugging Face Tokenizers)\nMany Hugging Face models\nA flexible library for building and using fast, production-ready tokenizers (WordPiece, BPE, Unigram, byte-level) with customizable pre- and post-processing.\n\n\n\nTiktokenizer is a free, browser-based tool that helps you see how language models like GPT-3.5 and GPT-4 break text into tokens—the fundamental units they process. Built using OpenAI’s official tiktoken library, it allows you to input any text, choose a model, and instantly see how many tokens your input uses, along with how the text is split. This is essential for understanding how models interpret prompts, stay within context limits, and calculate usage costs. It’s a practical tool for debugging, optimizing prompts, and learning how AI systems “see” language.\nTokenizer. OpenAI’s large language models process text using tokens, which are common sequences of characters found in a set of text. The models learn to understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "90-resources.html#thought-leaders",
    "href": "90-resources.html#thought-leaders",
    "title": "7  Resources",
    "section": "7.3 Thought Leaders",
    "text": "7.3 Thought Leaders\nJay Alammar\nhttps://jalammar.github.io/\nEnroll for free now: https://bit.ly/4aRnn7Z Github Repo: https://github.com/HandsOnLLM/Hands-On-Large-Language-Models\nAndrej Karpathy https://github.com/karpathy/LLM101n\nWhat I cannot create, I do not understand. -Richard Feynman\nIn this course we will build a Storyteller AI Large Language Model (LLM). Hand in hand, you’ll be able to create, refine and illustrate little stories with the AI. We are going to build everything end-to-end from basics to a functioning web app similar to ChatGPT, from scratch in Python, C and CUDA, and with minimal computer science prerequisites. By the end you should have a relatively deep understanding of AI, LLMs, and deep learning more generally.\nSyllabus\nChapter 01 Bigram Language Model (language modeling) Chapter 02 Micrograd (machine learning, backpropagation) Chapter 03 N-gram model (multi-layer perceptron, matmul, gelu) Chapter 04 Attention (attention, softmax, positional encoder) Chapter 05 Transformer (transformer, residual, layernorm, GPT-2) Chapter 06 Tokenization (minBPE, byte pair encoding) Chapter 07 Optimization (initialization, optimization, AdamW) Chapter 08 Need for Speed I: Device (device, CPU, GPU, …) Chapter 09 Need for Speed II: Precision (mixed precision training, fp16, bf16, fp8, …) Chapter 10 Need for Speed III: Distributed (distributed optimization, DDP, ZeRO) Chapter 11 Datasets (datasets, data loading, synthetic data generation) Chapter 12 Inference I: kv-cache (kv-cache) Chapter 13 Inference II: Quantization (quantization) Chapter 14 Finetuning I: SFT (supervised finetuning SFT, PEFT, LoRA, chat) Chapter 15 Finetuning II: RL (reinforcement learning, RLHF, PPO, DPO) Chapter 16 Deployment (API, web app) Chapter 17 Multimodal (VQVAE, diffusion transformer) Appendix\nFurther topics to work into the progression above:\nProgramming languages: Assembly, C, Python Data types: Integer, Float, String (ASCII, Unicode, UTF-8) Tensor: shapes, views, strides, contiguous, … Deep Learning frameworks: PyTorch, JAX Neural Net Architecture: GPT (1,2,3,4), Llama (RoPE, RMSNorm, GQA), MoE, … Multimodal: Images, Audio, Video, VQVAE, VQGAN, diffusion\n\n\n\n\nRaschka S (2024) Build a large language model (from scratch) (Manning).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "98-faq.html",
    "href": "98-faq.html",
    "title": "8  FAQ",
    "section": "",
    "text": "What does the word projection mean?\n\n\nWhat is the relationship between the size of the vocabulary and the number of dimensions in an embedding vector? When are these the same and when are they not?",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "99-references.html",
    "href": "99-references.html",
    "title": "References",
    "section": "",
    "text": "Alammar J, Grootendorst M (2024) Hands-on\nlarge language models (O’Reilly).\n\n\nRaschka S (2024) Build\na large language model (from scratch) (Manning).\n\n\nStarmer J (2025) Attention in transformers: Concepts and code in\nPyTorch.",
    "crumbs": [
      "References"
    ]
  }
]